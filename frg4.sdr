#version 100
#ifdef GL_ES
precision mediump float; 
#endif

uniform float 		time;
uniform vec4 		mouse;
uniform vec2 		resolution;
uniform vec4		mouse1;
uniform vec4		mouse2;
uniform vec4		mouse3;
uniform vec4		mouse4;
uniform vec4		mouse5;/**
 * Original: http://glslsandbox.com/e#28192.0
 * Enhanced version by @Mourtz
 */


float SCALE = 2.0;
vec2 SPR_SIZE = vec2(6, 8);

vec2 start = vec2(0,0);
vec2 tuv = vec2(0,0);
vec2 chp = vec2(0,0);
vec2 cur = vec2(0,0);
vec2 char = vec2(0,0);

#define c_a ch(vec2(0x7268BE, 0x8A2000));
#define c_b ch(vec2(0xF22F22, 0x8BC000));
#define c_c ch(vec2(0x722820, 0x89C000));
#define c_d ch(vec2(0xE248A2, 0x938000));
#define c_e ch(vec2(0xFA0E20, 0x83E000));
#define c_f ch(vec2(0xFA0E20, 0x820000));
#define c_g ch(vec2(0x72282E, 0x89C000));
#define c_h ch(vec2(0x8A2FA2, 0x8A2000));
#define c_i ch(vec2(0xF88200, 0x23E000));
#define c_j ch(vec2(0xF84104, 0x918000));
#define c_k ch(vec2(0x8A4A34, 0x8A2000));
#define c_l ch(vec2(0x820820, 0x83E000));
#define c_m ch(vec2(0x8B6AA2, 0x8A2000));
#define c_n ch(vec2(0x8B2AA6, 0x8A2000));
#define c_o ch(vec2(0x7228A2, 0x89C000));
#define c_p ch(vec2(0xF228BC, 0x820000));
#define c_q ch(vec2(0x7228AA, 0x99E000));
#define c_r ch(vec2(0xF228BC, 0x8A2000));
#define c_s ch(vec2(0x7A0702, 0x0BC000));
#define c_t ch(vec2(0xF88208, 0x208000));
#define c_u ch(vec2(0x8A28A2, 0x89C000));
#define c_v ch(vec2(0x8A28A2, 0x508000));
#define c_w ch(vec2(0x8A28AA, 0xDA2000));
#define c_x ch(vec2(0x8A2722, 0x8A2000));
#define c_y ch(vec2(0x8A2782, 0x89C000));
#define c_z ch(vec2(0xF84210, 0x83E000));
#define c_0 ch(vec2(0x732AA6, 0x89C000));
#define c_1 ch(vec2(0x218208, 0x23E000));
#define c_2 ch(vec2(0x722108, 0x43E000));
#define c_3 ch(vec2(0x722302, 0x89C000));
#define c_4 ch(vec2(0x92491E, 0x104000));
#define c_5 ch(vec2(0xFA0F02, 0x89C000));
#define c_6 ch(vec2(0x72283C, 0x89C000));
#define c_7 ch(vec2(0xF82108, 0x420000));
#define c_8 ch(vec2(0x722722, 0x89C000));
#define c_9 ch(vec2(0x722782, 0x89C000));
#define c_per ch(vec2(0x000000, 0x008000));
#define c_exc ch(vec2(0x208908, 0x008000));
#define c_com ch(vec2(0x000800, 0x008400));
#define c_col ch(vec2(0x008000, 0x008000));
#define c_sol ch(vec2(0x008000, 0x008400));
#define c_pls ch(vec2(0x00823E, 0x208000));
#define c_dsh ch(vec2(0x00003E, 0x000000));
#define c_div ch(vec2(0x002108, 0x420000));
#define c_ast ch(vec2(0x000508, 0x500000));
#define c_lbr ch(vec2(0x084104, 0x102000));
#define c_rbr ch(vec2(0x810410, 0x420000));
#define c_lsb ch(vec2(0x184104, 0x106000));
#define c_rsb ch(vec2(0xC10410, 0x430000));
#define c_lcb ch(vec2(0x184208, 0x106000));
#define c_rcb ch(vec2(0xC10208, 0x430000));
#define c_les ch(vec2(0x084208, 0x102000));
#define c_grt ch(vec2(0x408104, 0x210000));
#define c_sqo ch(vec2(0x208000, 0x000000));
#define c_dqo ch(vec2(0x514000, 0x000000));
#define c_que ch(vec2(0x72208C, 0x008000));
#define c_pct ch(vec2(0x022108, 0x422000));
#define c_dol ch(vec2(0x21EA1C, 0x2BC200));
#define c_num ch(vec2(0x53E514, 0xF94000));
#define c_ats ch(vec2(0x722BAA, 0xA9C000));
#define c_equ ch(vec2(0x000F80, 0xF80000));
#define c_tdl ch(vec2(0x42A100, 0x000000));
#define c_rsl ch(vec2(0x020408, 0x102000));
#define c_crt ch(vec2(0x214880, 0x000000));
#define c_amp ch(vec2(0x42842C, 0x99C000));
#define c_bar ch(vec2(0x208208, 0x208208));
#define c_blk ch(vec2(0xFFFFFF, 0xFFFFFF));
#define c_trd ch(vec2(0xFD5FD5, 0xFD5FD5));
#define c_hlf ch(vec2(0xA95A95, 0xA95A95));
#define c_qrt ch(vec2(0xA80A80, 0xA80A80));
#define c_spc ch(vec2(0x000000, 0x000000));

float sprite(vec2 ch,vec2 uv)
{
	uv = floor(uv);
	vec2 b = vec2((SPR_SIZE.x - uv.x - 1.0) + uv.y * SPR_SIZE.x) - vec2(24,0);
	vec2 p = mod(floor(ch / exp2(clamp(b,-1.0, 25.0))), 2.0);
	return dot(p,vec2(1)) * float(all(bvec4(greaterThanEqual(uv,vec2(0)), lessThan(uv,SPR_SIZE))));
}

void ch(vec2 ch)
{
	if(floor(chp) == floor(cur))
	{
		char = ch;
	}
	cur.x++;
}

void digit(float n)
{
	n = mod(floor(n),10.0);
	if(n == 0.0) c_0 ;
	if(n == 1.0) c_1 ;
	if(n == 2.0) c_2 ;
	if(n == 3.0) c_3 ;
	if(n == 4.0) c_4 ;
	if(n == 5.0) c_5 ;
	if(n == 6.0) c_6 ;
	if(n == 7.0) c_7 ;
	if(n == 8.0) c_8 ;
	if(n == 9.0) c_9 ;
}

void number(float n)
{
	for(int i = 5;i > -3;i--)
	{
		float d = n/pow(10.0, float(i));
		if(i == -1){ c_per }
		if(d > 1.0 || i <= 0){ digit(d); }
	}
}

void start_print(vec2 uv)
{
	cur = uv;
	start = uv;
}

void spc()
{
	cur.x++;
}

void nl()
{
	cur.x = start.x;
	cur.y--;
}

vec2 str_size(vec2 cl)
{
	return SPR_SIZE * cl;
}

float Cmain( float c )
{
	
	vec2 aspect = resolution.xy / resolution.y;
	vec2 uv = ( gl_FragCoord.xy ) / SCALE;

	chp = (uv/SPR_SIZE);
	vec2 loc = vec2(17.0,14.0);
	if((chp.x > 10.0) && (chp.x < 50.0))
	{
	vec2 cuv = mod(uv,SPR_SIZE);

	//tuv = floor(cuv);


	//////////////////////////////////////////////////////
	/// Here's where you start printing
	/////////////////////////////////////////////////////
	
	start_print(loc);
	if(mouse.z < 1.5)
	{
		c_s c_c c_o c_r c_e c_spc c_col

	//nl(); nl();
        //cur.x = 14.;



		start_print(loc + vec2(15.0,0.0));

		number(time);
	}
	else
	{
		c_g c_a c_m c_e c_spc c_o c_v c_e c_r
	}

	return c + sprite(char,cuv);

	}
	else
	{
		return c;
	}
}

// Hand-drawn Sketch Effect by HLorenzi!

#define EDGE_WIDTH 0.15
#define RAYMARCH_ITERATIONS 40
#define SHADOW_ITERATIONS 50
#define SHADOW_STEP 1.0
#define SHADOW_SMOOTHNESS 256.0
#define SHADOW_DARKNESS 0.75

// Distance functions by www.iquilezles.org
float fSubtraction(float a, float b) {return max(-a,b);}
float fIntersection(float d1, float d2) {return max(d1,d2);}
void fUnion(inout vec2 d1, vec2 d2) 
{
	d1 = (d1.x<d2.x) ? d1 : d2;
}

float sdPlane( vec3 p )
{
	return p.z+ 10.0;
}
float pSphere(vec3 p, float s) {return length(p)-s;}
float pRoundBox(vec3 p, vec3 b, float r) {return length(max(abs(p)-b,0.0))-r;}
float pTorus(vec3 p, vec2 t) {vec2 q = vec2(length(p.xz)-t.x,p.y); return length(q)-t.y;}
float pTorus2(vec3 p, vec2 t) {vec2 q = vec2(length(p.xy)-t.x,p.z); return length(q)-t.y;}
float pCapsule(vec3 p, vec3 a, vec3 b, float r) {vec3 pa = p - a, ba = b - a;
	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 ); return length( pa - ba*h ) - r;}

float mouse_com(float m)
{
	float k = 60.0 - 120.0*mouse.x;
	if(k < -30.0)
	{
		return -30.0;
	}
	else if(k >30.0)
	{
		return 30.0;
	}
	else 
	{
		return k;
	}
} 
vec2 distf(vec3 p)
{
	vec2 d = vec2(110.0,1.0);
	
	fUnion(d, vec2(pRoundBox(vec3(mouse_com(mouse.x),-5.0,10.0) + p, vec3(5.0,5.0,5.0), 1.0),mouse.z));
	fUnion(d, vec2(pRoundBox(vec3(mouse1.y,mouse1.x,10.0) + p, vec3(5.0,5.0,5.0), 1.0),mouse.z));

	fUnion(d, vec2(pRoundBox(vec3(mouse2.y,mouse2.x,10.0) + p, vec3(5.0,5.0,5.0), 1.0),mouse.z));

	fUnion(d, vec2(pRoundBox(vec3(mouse3.y,mouse3.x,10.0) + p, vec3(5.0,5.0,5.0), 1.0),mouse.z));

	fUnion(d, vec2(pRoundBox(vec3(mouse4.y,mouse4.x,10.0) + p, vec3(5.0,5.0,5.0), 1.0),mouse.z));

	fUnion(d, vec2(pRoundBox(vec3(mouse5.y,mouse5.x,10.0) + p, vec3(5.0,5.0,5.0), 1.0),mouse.z));

	fUnion(d, vec2(pRoundBox(vec3(-40.0,20.0,10.0) + p, vec3(1.0,200.0,1.0), 1.0),1.0));
	fUnion(d, vec2(pRoundBox(vec3(40.0,20.0,10.0) + p, vec3(1.0,200.0,1.0), 1.0),1.0));

	fUnion(d, vec2(pRoundBox(vec3(0.0,-20.0,10.0) + p, vec3(1.0,10.0,0.5), 1.0),1.0));

	if(p.y < 20.0 && p.x > -20.0 && p.x < 20.0)
	{
		fUnion(d, vec2(pRoundBox(vec3(0.0,20.0,10.0) + p, vec3(1.0,10.0,0.5), 1.0),1.0));

		fUnion(d, vec2(pRoundBox(vec3(0.0,60.0,10.0) + p, vec3(1.0,10.0,0.5), 1.0),1.0));

		fUnion(d, vec2(pRoundBox(vec3(0.0,100.0,10.0) + p, vec3(1.0,10.0,0.5), 1.0),1.0));
	}

	
	fUnion(d,vec2(sdPlane(p),1.2));
	fUnion(d, vec2(pRoundBox(vec3(0.0,20.0,-10.0) + p, vec3(20.0,15.0,1.5), 1.0),0.5));
	
	return d;
}


vec3 normal(vec3 p)
{
	const float eps = 0.01;
	float m;
    vec3 n = vec3( (distf(vec3(p.x-eps,p.y,p.z)).x - distf(vec3(p.x+eps,p.y,p.z)).x),
                   (distf(vec3(p.x,p.y-eps,p.z)).x - distf(vec3(p.x,p.y+eps,p.z)).x),
                   (distf(vec3(p.x,p.y,p.z-eps)).x - distf(vec3(p.x,p.y,p.z+eps)).x)
				 );
    return normalize(n);
}

vec4 raymarch(vec3 from, vec3 increment)
{
	const float maxDist = 200.0;
	const float minDist = 0.001;
	const int maxIter = RAYMARCH_ITERATIONS;
	
	float dist = 0.0;
	
	float lastDistEval = 1e10;
	float edge = 0.0;
	vec2 distE;
	for(int i = 0; i < maxIter; i++) {
		vec3 pos = (from + increment * dist);
		distE = distf(pos);
		float distEval = distE.x;
		
		if (lastDistEval < EDGE_WIDTH && distEval > lastDistEval + 0.001) {
			edge = 1.0;
		}
		
		if (distEval < minDist) {
			break;
		}
		
		dist += distEval;
		if (distEval < lastDistEval) lastDistEval = distEval;
	}
	
	float mat = 1.0;
	if (dist >= maxDist) mat = 0.0;
	
	return vec4(dist, mat, edge, distE.y);
}

float shadow(vec3 from, vec3 increment)
{
	const float minDist = 1.0;
	
	float res = 1.0;
	float t = 1.0;
	for(int i = 0; i < SHADOW_ITERATIONS; i++) {
        float h = distf(from + increment * t).x;
        if(h < minDist)
            return 0.0;
		
		res = min(res, SHADOW_SMOOTHNESS * h / t);
        t += SHADOW_STEP;
    }
    return res;
}

float rand(float x)
{
    return fract(sin(x) * 43758.5453);
}

float triangle(float x)
{
	return abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;
}

vec4 getPixel(vec2 p, vec3 from, vec3 increment, vec3 light)
{
	vec4 c = raymarch(from, increment);
	vec3 hitPos = from + increment * c.x;
	vec3 normalDir = normal(hitPos);
	
	c.w = Cmain(c.w);
	float diffuse = c.w + min(0.0, dot(normalDir, -light));
	float inshadow = 0.0;//(1.0 - shadow(hitPos, -light)) * SHADOW_DARKNESS;
	
	diffuse = max(diffuse, inshadow);
	
	if (c.y == 0.0) diffuse = min(pow(length(p), 4.0) * 0.125,1.0);
	
	
	float xs = (rand(time * 6.6) * 0.1 + 0.9);
	float ys = (rand(time * 6.6) * 0.1 + 0.9);
	float hatching = max((clamp((sin(p.x * xs * (170.0 + rand(time) * 30.0) +
							p.y * ys * (110.0 + rand(time * 1.91) * 30.0)) * 0.5 + 0.5) -
						   		(1.0 - diffuse), 0.0, 1.0)),
						 (clamp((sin(p.x * xs * (-110.0 + rand(time * 4.74) * 30.0) +
							p.y * ys * (170.0 + rand(time * 3.91) * 30.0)) * 0.5 + 0.5) -
						   		(1.0 - diffuse) - 0.4, 0.0, 1.0)));
	
	vec4 mCol = mix(vec4(1,0.9,0.8,1), vec4(1,0.9,0.8,1) * 0.5, hatching);
					
	return mix(mCol,vec4(1,0.9,0.8,1) * 0.5,c.z);
}


void main( )
{	
	//time = floor(iGlobalTime * 16.0) / 16.0;
	// pixel position
	vec2 q = gl_FragCoord.xy / resolution.xy;
	vec2 p = -1.0+2.0*q;
	p.x *= -resolution.x/resolution.y;
	p += vec2(triangle(p.y * rand(time) * 4.0) * rand(time * 1.9) * 0.015,
			triangle(p.x * rand(time * 3.4) * 4.0) * rand(time * 2.1) * 0.015);
	p += vec2(rand(p.x * 3.1 + p.y * 8.7) * 0.01,
			  rand(p.x * 1.1 + p.y * 6.7) * 0.01);
	
	// mouse
    vec2 mo = mouse.xy/resolution.xy;
	vec2 m = mouse.xy / resolution.xy;
	if (mouse.x == 0.0 && mouse.y == 0.0) {
		m = vec2(time * 0.06 + 1.67, 0.78);	
	}
	m = -1.0 + 2.0 * m;
	m *= vec2(4.0,-0.75);
	m.y += 0.75;

	// camera position
	float dist = 50.0;
	vec3 ta = vec3(0,0.0,0);
	vec3 ro = vec3( 0.0, dist, 10.0);
	vec3 light = vec3(cos(m.x - 2.27) * 50.0, sin(m.x - 2.27) * 50.0, -20.0);
	
	// camera direction
	vec3 cw = normalize( ta-ro );
	vec3 cp = vec3( 0.0, 0.0, 1.0 );
	vec3 cu = normalize( cross(cw,cp) );
	vec3 cv = normalize( cross(cu,cw) );
	vec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );

	// calculate color
	vec4 col = getPixel(p, ro, rd, normalize(light));
	gl_FragColor = col;
	
}
